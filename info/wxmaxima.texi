\input texinfo
@setfilename  wxmaxima.info
@finalout

@c -*-texinfo-*-

@c 
@c (C) 2014-2017 Gunter Königsmann <wxMaxima@physikbuch.de>
@c (C) 2015 Mixon Wilson
@c Based on a file from the Maxima sources that was created from
@c Jim Van Zandt <jrv@vanzandt.mv.com>

@c to update the menus do: 
@c (texinfo-multiple-files-update "wxMaxima.texi" t t)
@c
@c texinfo-multiple-files-update will delete the detailed node listing!


@c %**start of header
@settitle wxMaxima Manual

@c @synindex ky fn
@c @synindex vr fn
@c @synindex cp fn

@c %**end of header
@ifinfo
This is a Texinfo @i{wxMaxima} manual based on the @i{Maxima}
manual which is Copyright 1994,2001 William F. Schelter.

The original version if the @i{wxMaxima} manual was written in
2014-2015 by Gunter Königsmann and Mixon Wilson.

@format
INFO-DIR-SECTION Math
START-INFO-DIR-ENTRY
* @i{wxMaxima}: (wxMaxima).     A gui for a computer algebra system.
END-INFO-DIR-ENTRY
@end format

@macro var {expr}
<\expr\>
@end macro
@end ifinfo

@iftex
@titlepage
@sp 10
@comment The title is printed in a large font.
@center @titlefont{wxMaxima Manual}
@page
@vskip 0pt plus 1filll
Maxima is a computer algebra system that is actively developed and is
successfully used in a variety of applications like maths, computer
science and biochemistry.

@i{wxMaxima} is a graphical user interface (GUI) for the @i{Maxima}
computer algebra system (CAS). @i{wxMaxima} allows one to use all of
Maxima’s functions. In addition, it provides convenient wizards for
accessing the most commonly used features. This manual describes some
of the features that make @i{wxMaxima} one of the most popular GUIs
for @i{Maxima}.
@end titlepage
@end iftex

@ifnottex
@node top
@top The @i{wxMaxima} user's manual
wxMaxima is a graphical user interface (GUI) for the Maxima computer
algebra system (CAS). @i{wxMaxima} allows to use all of Maxima's
functions. In addition, it  provides convenient wizards for accessing
the most commonly used features. This manual describes some of the  
features that make @i{wxMaxima} one of the most popular GUIs for Maxima.

@end ifnottex
@ifnotinfo

@image{wxMaximaLogo,4cm}

@end ifnotinfo
@ifnottex
@menu
* Introduction::    @i{wxMaxima} basics
* Extensions::      The commands @i{wxMaxima} adds to Maxima
* Troubleshooting:: What to do if @i{wxMaxima} doesn't work as expected
* FAQ::             Frequently asked questions
* CommandLine::     The command-line arguments @i{wxMaxima} supports
@end menu
@end ifnottex
@node Introduction
@chapter Introduction to @i{wxMaxima}
@section Maxima and @i{wxMaxima}
In the open-source domain big systems are normally split into smaller
projects that are easier to handle for small groups of developers.
For example a CD burner program will consist of a command-line tool
that actually burns the CD and a graphical user interface that allows
users to use it without having to learn about all the command line
switches and in fact without using the commandline at all. One
advantage of this approach is that the developing work that
was invested into the command-line program can be shared by many
programs without having to re-invent the wheel: The same CD-burner
command-line program can be used as a ``send-to-CD''-plug-in for a
file manager application, for the ``burn to CD'' function of a music
player and as the CD writer for a DVD backup tool. Another advantage
is that splitting one big task into smaller parts allows the
developers to provide several user interfaces for the same program.

Computer algebra systems like Maxima fit into this framework. A CAS can provide
the logic behind a arbitrary precision calculator
application or it can do automatic transforms of equations in the
background of a bigger system (e.g., 
@uref{http://www.sagemath.org,  Sage}). Alternatively, it can be a
actually used as a free-standing system. @i{Maxima} can be accessed via a 
command line. Often, however, an interface like @i{wxMaxima} proves a more 
efficient way to access the software, especially for newcomers.
computer algebra system.
@subsection @i{Maxima}
@cindex CAS
@cindex Computer algebra System
Maxima 
is a full-featured computer algebra system (CAS). In other
words it is a program that can solve mathematical problems by
rearranging formulas and finding a formula that solves the problem as
opposed to just outputting the numeric value of the result. In other words, 
Maxima can serve as a calculator that gives numerical representations of variables, 
but it can also provide analytical solutions. Furthermore, it offers a range of
numerical methods of analysis for equations or systems of equations that cannot
be solved analytically.

@ifnotinfo

@image{maxima_screenshot,6cm}

@end ifnotinfo
Extensive documentation for @i{Maxima} is available on the internet,


There is extensive documentation for @i{Maxima} 
@uref{href="http://maxima.sourceforge.net/documentation.html, available in the internet}

part of this documentation is also available in @i{wxMaxima}'s help menu:
Pressing the @key{Help} key (on most systems that would be the
@key{F1} key) wxmaxima's context-sensitive help feature 
will automatically jump to @i{Maxima}'s manual page for the command at the
cursor.
@subsection @i{wxMaxima}
wxMaxima is a graphical user interface that provides the full
functionality and flexibility of @i{Maxima}.  @i{wxMaxima} offers users a
graphical display and many features that make working with @i{Maxima}
easier. For example @i{wxMaxima} allows one to export any cell's contents (or,
if that is needed, any part of a formula, as well) as text, as LaTeX
or as MathML specification at a simple right-click. Indeed, an entire
workbook can be exported, either as an HTML file or as a LaTeX file.

@ifnotinfo

@image{wxMaximaWindow,12cm}

@end ifnotinfo
The calculations are performed by the @i{Maxima} command-line tool in the
background.
@section  Worksheet basics
Much of @i{wxMaxima} is self-explaining, but some details require
attention. @uref{https://wxMaxima-developers.github.io/wxmaxima/help.html, This site}
contains a number of workbooks that address various aspects of 
Maxima. Working through some of these (particularly the "10 minute (wx)Maxima tutorial") will 
increase one's familiarity with both the content of @i{Maxima} and the use of @i{wxMaxima} to interact
with @i{Maxima}. This manual concentrates on describing aspects of @i{wxMaxima} that are not likely
to be self-evident and that might not be covered in the online material.
@subsection The worksheet approach
One of the very few things that aren't standard is that @i{wxMaxima}
organizes the data for @i{Maxima} into cells that are only evaluated (which
means: sent to @i{Maxima}) when the user requests this. When a cell is evaluated,
all commands in that cell, and only that cell, are evaluated as a batch. (One can
select a set of adjacent cells and evaluate them together. Also, one can instruct
Maxima to evaluate all cells in a workbook in one pass.) This approach might
feel unfamiliar at the first sight. It does, however drastically ease work with
big documents (where the user certainly does not want every small change
to automatically to trigger a full re-evaluation of the whole
document). Also, this approach is very handy for debugging.

The cells @i{wxMaxima} automatically creates on typing some text are @i{Maxima}
input cells that will eventually be sent to @i{Maxima}.
@ifnotinfo

@image{InputCell,12cm}

@end ifnotinfo

On evaluation of an input cell's contents the input cell @i{Maxima}
assigns a label to the input (by default shown in red and recognizable
by the @code{%i}) by which it can be referenced later n the @i{wxMaxima}
session. The output that @i{Maxima} generates will be shown in a different
style  (which can be 
user-selected) and preceded by a @i{Maxima} label that begins  beginning
with @code{%o}. The output item can be accessed later with a reference
to this code. By default @i{wxMaxima} will also attempt to replace this
dynamically-generated label by a more descriptive name if the user
provides one. The @code{%o}-style label @i{Maxima} auto-generates will
still be accessible, though.

Besides the input cells @i{wxMaxima} allows for text cells for
documentation, image cells, title cells, chapter
cells and section cells. Every cell has it's own undo buffer so debugging
by changing the values of several cells and then gradually reverting the
unneeded changes is rather easy. Furthermore the worksheet itself has a
global undo buffer that can undo cell edits, adds and deletes.

@ifnotinfo
The figure below shows a title cell, a section cell, a text cell, and part of an
input/output cell.

@image{NoiseFilter,12cm}

@end ifnotinfo
@subsection Cells
The worksheet is organized in cells that work like very much like the
styles word processors offer. Each cell can contain one of the following
types of content:
@itemize @bullet
@item one or more lines of @i{Maxima} input
@item an image
@item a title, section, subsection or subsubsection
@item Output of or a question from @i{Maxima}
@item normal a text block that can for example used for explaining the meaning
      of the math cell's contents.
@item a page break
@end itemize
The default behavior of @i{wxMaxima} when text is input is to automatically
create a math cell. Cells of other types can be created
using the Cell menu or using the hotkeys shown in the menu.

@subsection Horizontal and vertical cursors
It sometimes is desirable to allow selecting multiple cells or
only part of a cell for export or Drag-and-Drop.
However, beginning such an action
in the middle of one cell and ending it in the middle of another will
almost certainly lead to unexpected results. @i{wxMaxima}
will therefore extend the selection to full cells in this case.

wxMaxima works around this by defining two types of cursors @i{wxMaxima}
will switch between automatically when needed:
@itemize @bullet
@item A horizontal cursor that is able to select any number of whole
      cells. This cursor is activated by moving the cursor between
      two cells or by clicking on a space between two cells.
      To select a set of adjacent cells, click in the bracket at the
      left of the top cell (but not in the triangle) and then drag the
      cursor so that this cell and the next cell (or range of cells)
      is highlighted. Then use @key{ctrl+enter} or @key{shift+enter}
      to execute the highlighted cells.
      
@item A vertical cursor that works inside a cell. This cursor is
      activated by moving the cursor inside a cell using the mouse
      pointer or the cursor keys.
@end itemize 
As long as the cursor is inside a cell search operations will limit
their scope to the current cell.
@subsection Command autocompletion
wxMaxima contains an autocompletion feature that is triggered via the menu
(Cell/Complete Word) or alternatively by pressing the key combination
@key{Ctrl}+@key{k}. The autocompletion is context-sensitive and if activated
within an unit specification for ezUnits it will offer a list of applicable
units.

@ifnotinfo

@image{ezUnits,12cm}

@end ifnotinfo
Besides completing the current command's or variable's name the
autocompletion is able to show a template for most of the
commands indicating the type (and meaning) of the parameters this
program expects. To activate this feature press
@key{Shift}+@key{Ctrl}+@key{k} or select the respective menu item
(Cell/Show Template).

@subsection Greek characters
Computers traditionally store characters in 8-bit values. This allows
for a maximum of 256 different characters. All letters, numbers,
and control symbols (end of transmission, end of string, lines and
edges for drawing rectangles for menus etc.) of nearly any given
language can fit within that limit.

For most countries the codepage of 256 characters that has been chosen
does not include Greek letters, though. To overcome this limitation
unicode has been invented: This is a method of including characters
that are not normally used in the English language in a text that
(as long as only the basic form of Latin characters is used)
looks like plain 8-bit ASCII.

Maxima allows for unicode characters if it runs on a lisp that
supports them. If the wxWidgets library that @i{wxMaxima} is built on
supports unicode characters, too, then @i{wxMaxima} can be built with unicode
support. In this case it (besides a Greek Characters Sidebar) provides
a method of entering Greek characters using the keyboard:
@itemize @bullet
@item An alpha is entered by pressing the <ESC> key and then typing in
      the character a followed by a press on the <ESC> key.
@item A beta is entered by pressing the <ESC> key and then typing in
      the character b followed by a press on the <ESC> key.
@item A gamma is entered by pressing the <ESC> key and then typing in
      the character c followed by a press on the <ESC> key.
@item ...and so on.
@end itemize 
If the system does not provide unicode support @i{wxMaxima} will still
provide a method of showing greek characters: Variable names like
"alpha" are always displayed as the corresponding greek symbols.

The lowercase greek letters actually can be entered both by enter
a lating letter or the whole latin name of the greek letter
followed and preceded by a press of the escape key:
@example
a alpha    i iota      r rho
b beta     k kappa     s sigma
g gamma    l lambda    t tau
d delta    m mu        u upsilon
e epsilon  n nu        f phi
z zeta     x xi        c chi
h eta      om omicron  y psi
q theta    p pi        o omega
@end example

The same is true for the uppercase greek letters:
@example
A Alpha    I Iota      R Rho
B Beta     K Kappa     S Sigma
G Gamma    L Lambda    T Tau
D Delta    M Mu        U Upsilon
E Epsilon  N Nu        P Phi
Z Zeta     X Xi        C Chi
H Eta      Om Omicron  Y Psi
T Theta    P Pi        O Omega
@end example

This mechanism also allows to enter some miscellaneous mathematical
symbols:
@example
hbar          planck's constant: a h with a vertical bar above it
Hbar          a H with a vertical bar above it
@end example

This mechanism also allows to enter some miscellaneous mathematical
symbols:
@example
2             squared
3             to the power of three
/2            1/2
partial       partial sign (the d of dx/dt)
integral      integral sign
sq            root
ii            imaginary
ee            element
hb or hbar    h barred
Hbar          H barred
in            in
impl,implies  implies
inf           infinity
empty         empty
TB            Big triangle right
tb            small triangle right
and           and
or            or
xor           xor
nand          nand
nor           nor
equiv         equivalent
not           not
union         union
inter         intersection
subseteq      subset or equal
subset        subset
notsubseteq   not subset or equal
notsubset     not subset
approx        approximately
propto        proportional to
neq,!=,/=
or #          not equal to
+/- or pm     a plus/minus sign
<= or leq     equal or less than
>= or geq     equal or greater than
<< or ll      much less than
>> or gg      much greater than
equiv         equivalent to
qed           end of proof
sum           sum sign
prod          product sign
exists        "there exists" sign
nexists       "there is no" sign
parallel      a "parallel" sign
perp          a "perpendicular" sign
leadsto       a "leads to" sign
->            a right arrow
-->           a long right arrow
@end example
If a special symbol isn't in the list it is possible to input arbitrary
unicode characters by pressing @code{<ESC>number of the character<ESC>}.
@code{<ESC>61<ESC>} therefore results in an @code{a}.

Be aware that a @i{Maxima} running on a lisp without unicode support
might not be able to deal with files that contain special unicode
characters.

Please note that most of these symbols (notable exceptions are the
logic symbols) don't have a special meaning in @i{Maxima} and therefore
will be interpreted as ordinary characters - or might provoke
unexpected results in case that the @i{Maxima} is being run
by a lisp that doesn't support dealing with special unicode characters.
@subsection Side Panes
Shortcuts to the most important @i{Maxima} commands and a history of the last
issued commands can be accessed using the side panes. They can be enabled
using the "Panes" entry in the "Maxima" menu. The shortcuts can be moved to
where the location is most convenient, inside or outside the @i{wxMaxima} window.
The same commands can be accessed via the menus.
@ifnotinfo

@image{SidePanes,12cm}

@end ifnotinfo
@subsection MathML output
It seems that several word processors and similar programs either recognize
MathML input and automatically insert it as an editable 2D equation - or (like
libreOffice 5.1) have an equation editor that offers an ``import MathML from
clipboard'' feature. In order to address this @i{wxMaxima} offers a ``copy to word
processor'' right-click menu entry that outputs the selected part of an
equation in a format the external program (hopefully) understands.
@subsection Markdown support
A @i{wxMaxima} workbook can be exported as either an HTML file or a LaTeX file. The
program uses a set of standard markdown conventions. Markdown in many
cases collides with the notations that are frequently used 
for mathematics. @i{wxMaxima} will recognize bullet lists, though, for the HTML
and TeX export when the items are marked with stars.
@example
Ordinary text
 * One item, indentation level 1
 * Another item at indentation level 1
   * An item at a second indentation level
   * A second item at the second indentation level
 * A third item at the first indentation level
Ordinary text
@end example

wxMaxima will recognize text starting with > chars as block quotes:
@example
Ordinary text
> quote quote quote quote
> quote quote quote quote
> quote quote quote quote
Ordinary text
@end example



wxMaxima will also recognize @code{=>} and replace it by a 
@example
cogito => sum.
@end example
Other symbols the markdown parser will recognize are @code{<=} and
@code{>=} for comparisons, a double-pointed double arrow (@code{<=>}),
single- headed arrows (@code{<->}, @code{->} and @code{<-}) and
@code{+/-} as the respective sign. For TeX output also @code{<<} and
@code{>>} are recognized.
@subsection Hotkeys
Most hotkeys can be found in the text of the respective menus.
Since they are actually taken from the menu text and thus can be customized
by the translations of @i{wxMaxima} to match the needs of users of the local
keyboard, we do not document  them here.
A few hotkeys or hotkey aliases, though, are not documented in the menus:
@itemize @bullet
@item @code{Ctrl+Shift+Delete} deletes a complete cell. 
@item @code{Ctrl+Tab} or @code{Ctrl+Shift} triggers the auto-completion mechanism.
@item @code{Ctrl+I} or @code{Ctrl+O} Zoom in or out.
@end itemize
@subsection Raw TeX in the TeX export
If a text cell begins with @code{TeX:} the TeX export contains the literal text
that follows the @code{TeX:} marker.
@section  File Formats
The material that is developed in a @i{wxMaxima} session can be stored for
later use in any of three ways:
@subsection .mac
@file{.mac} files are ordinary text files that can be read using
Maxima's read command or @i{wxMaxima}'s File/Batch File menu entry.

@ifnotinfo
One Example:

A @file{.mac} file named Quadratic.mac was created. It  
consists of two commands: @code{f(x) := (x - 5)^2;} and
@code{wxdraw2d( explicit(f(x),x,-5,15))}.
The result of entering that batch file appears below. (Some directory
path information is deleted.)

@image{BatchImage,12cm}

@end ifnotinfo

@example
%i1 read("test.mac");
@end example
You can be use @code{.mac} files for writing own library of
macros. But since they don't contain enough structural information
they cannot be read back as a @i{wxMaxima} session.
@subsection .wxm
@file{.wxm} files contain the input for @i{Maxima}, as well as any
text cells, title cells and chapter or section cells the user has typed
in. Pictures and @i{Maxima}'s output are not saved along with the
@file{.wxm} file, though.
@subsection .wxmx
This xml-based file format saves all text and images the work sheet
contains. It is the preferred file format now and comes in two
flavors:
@itemize @bullet
@item Files saved in the version-control friendly @file{.wxmx} format
contain all images in a standard compressed format (@file{.png}) and
a uncompressed copy of the xml tree that contains the structure of the
document and the text typed in by the user. Since the images are
compressed individually and the text is saved as text a version
control system like bazaar, subversion, git or mercurial will only
have to save the elements of the file that actually have changed since
the last version.
@item Files saved in disk space-optimized @file{.wxmx} format are
compressed as a whole. If no version control system is used this will
save disk space:
@itemize @bullet
@item The portion of the file that is pure xml data tends to get
fundamentally smaller when being compressed
@item and after the compression recurring data like image headers
will use up only a fraction of the space they originally did.
@end itemize
This comes at the cost, though, that the change of even a single line
of text in the uncompressed version tends to completely change the
structure of the compressed version of a file. A version control 
system that deals with such a file will - however optimized
it might be on handling differences between binary files -
will therefore have to track (and to store) a much higher number of
differences  between two file versions than necessary;
Since most version control systems compress the data they store on the 
server the server space occupied by the initial version of both
@file{.wxmx} flavors should be nearly identical in size.
@end itemize
@section Configuration options
For some common configuration variables @i{wxMaxima} offers two ways of
configuring:
@itemize @bullet
@item The configuration dialog box below lets you change their
      default values for the current and subsequent sessions. 
@item Also, the values for most configuration variables can be changed
      for the current session only by overwiting their values from
      the worksheet, as shown below.
@end itemize
@ifnotinfo

@image{wxMaxima_configuration_001,12cm}

@end ifnotinfo

@subsection Default animation framerate
The animation framerate that is used for new animations is kept in
the variable @var{wxanimate_framerate}. The initial value this
variable will contain in a new worksheet can be changed using the
configuration dialogue.
@subsection Default plot size for new @i{Maxima} sessions
After the next start plots embedded into the worksheet will be created
with this size if the value of  @var{wxplot_size} isn't changed by
Maxima.

In order to set the plot size of a single graph only use the following
notation can be used that sets a variable's value for one command only:
@example
wxdraw2d( explicit(x^2,x,-5,5)), wxplot_size=[480,480]$.
@end example

@subsection Use jsMath fonts
The style menu allows customization that pertains to the appearance of
your notebook as you work.
@ifnotinfo

@image{wxMaxima_configuration_002,12cm}

@end ifnotinfo
It also contains the option to use jsMath fonts. It is a good idea to
install these fonts since they were especially designed for maths and
tend to resolve issues that can be caused by broken fonts. If they are 
not installed on your computer, the option to activate them will not
be highlighted. The jsMath fonts can be found on
@uref{https://www.mpim-bonn.mpg.de/node/258, this site}.

@subsection Match parenthesis in text controls
This option enables two things:
@itemize @bullet
@item If an opening parenthesis, bracket or double quote is entered
wxMaxima will insert a closing one after it.
@item If text is selected if any of these keys is pressed the selected
text will be put between the matched signs.
@end itemize
@subsection Autosave interval
If this value is set to a value bigger than zero @i{Maxima} will work in a
more mobile-device-like fashion: 
@itemize @bullet
@item Files are saved automatically on exit
@item And the file will automatically be saved every n minutes.
@end itemize
For the automatic saving functionality to work @i{wxMaxima} needs to know
a name to save the file with, though. This means this feature will
only work if the file has already been saved to or opened from the
disk.
@node Extensions
@chapter Extensions to @i{Maxima}
wxMaxima is predominantly a graphical user interface for @i{Maxima}. That is, it primarily 
passes along commands to @i{Maxima} and reports the results of executing those commands. In some
cases, however, it adds functionality to @i{Maxima}. @i{wxMaxima}'s ability to generate reports by
exporting a workbook's contents to HTML and LaTeX files has been mentioned. This section
considers some ways that @i{wxMaxima} enhances the inclusion of graphics into a session.
@section Subscripted variables
if @var{wxsubscripts} is set to true variable names of the format @code{x_y} are
displayed using a subscript if
@itemize @bullet
@item @code{y} is a single letter
@item @code{y} is an integer
@end itemize

If the variable name doesn't match these requirements it can still be declared as
"to be subscripted" using the command
@code{wxdeclare_subscript(variable_name);} or @code{wxdeclare_subscript([variable_name1,variable_name2,...]);} 
Declaring a variable as subscripted can be reverted using the following command:
@code{wxdeclare_subscript(variable_name,false);}
@section Plotting
Plotting (having fundamentally to do with graphics) is a place where a
graphical user interface will have to provide some extensions to the
original program.
@subsection Embedding a plot into the work sheet
Maxima normally instructs the external program gnuplot to open a
separate window for every diagram it creates. Since many times it is
convenient to embed graphs into the work sheet instead @i{wxMaxima}
provides its own set of plot functions that don't differ from the
corresponding @i{Maxima} functions save in their name: They are all
prefixed by a ``wx''. For example  @command{wxplot} corresponds to
@command{plot}, @command{wxdraw} corresponds to @command{draw} and
@command{wxhistogram} corresponds to @command{histogram}.
@subsection Making embedded plots bigger or smaller
As noted above, the configure dialog provides a way to change the default size plots
are created with which sets the starting value of @var{wxplot_size}.
The plotting routines of @i{wxMaxima} respect this variable that specifies
the size of a plot in pixels. It can always be queried or used to set
the size of the following plots:
@example
%i1 wxplot_size:[1200,800];
%o1 [1200,800];

%i2 wxdraw2d(
        explicit(
            sin(x),
            x,1,10
        )
    )$
@end example
If the size of only one plot is to be changed @i{Maxima} provides a
canonical way to change an attribute only for the current cell.
@example
     %i1 wxplot_size:[1200,800];
     %o1 [1200,800];
     
     %i1 wxdraw2d(
             explicit(
                 sin(x),
                 x,1,10
             )
         ),wxplot_size=[1600,800]$

%i1 wxdraw2d(
        explicit(
            sin(x),
            x,1,10
        )
    ),wxplot_size=[1600,800]$
@end example

@subsection Better quality plots
Gnuplot doesn't seem to provide a portable way of determining whether it
supports the high-quality bitmap output the @code{cairo} library provides.
On systems where gnuplot is compiled to use this library the
pngcairo option from the configuration menu (that can be overridden
by the variable @var{wxplot_pngcairo}) enables support for
antialiasing and additional line styles.
@subsection Embedding animations into the spreadsheet
The @code{with_slider_draw} command is a version of @code{wxdraw2d}
that does prepare multiple plots and allows to switch between them
by moving the slider on top of the screen. If ImageMagick is installed
wxMaxima even allows to export this animation as an animated gif.

The first two arguments for @code{with_slider_draw} are the name of
the variable that is stepped between the plots and a list of the
values of these variable. The arguments that follow are the ordinary
arguments for @code{wxdraw2d}:
@example
with_slider_draw(
    f,[1,2,3,4,5,6,7,10],
    title=concat("f=",f,"Hz"),
    explicit(
        sin(2*%pi*f*x),
        x,0,1
    ),grid=true
);
@end example
The same functionality for 3d plots is accessible as @code{with_slider_draw3d}.

There is a second set of functions making use of the slider
@itemize @bullet
@item @code{wxanimate_draw} and
@item @code{wxanimate_draw3d}:
@end itemize
@example
wxanimate_draw(
    a, 3,
    explicit(sin(a*x), x, -4, 4),
    title=printf(false, "a=~a", a));
@end example

Normally the animations are played back or exported with the frame
rate chosen in the configuration of @i{wxMaxima}. To set the speed an
individual animation is played back the variable @var{wxanimate_framerate}
can be used:
@example
wxanimate(a, 10,
    sin(a*x), [x,-5,5]), wxanimate_framerate=6$
@end example

The animation functions have a pitfall that one has to be aware of when
using them: The slider variable's value are substituted into the
expression that is to be plotted - which will fail, if the variable
isn't directly visible in the expression. Therefore the following
example will fail:
@example
f:sin(a*x);
with_slider_draw(
    a,makelist(i/2,i,1,10),
    title=concat("a=",float(a)),
    grid=true,
    explicit(f,x,0,10)
)$
@end example
If @i{Maxima} is forced to first evaluate the expression and then asked
to substitute the slider's value plotting works fine instead:
@example
f:sin(a*x);
with_slider_draw(
    a,makelist(i/2,i,1,10),
    title=concat("a=",float(a)),
    grid=true,
    explicit(''f,x,0,10)
)$
@end example

@subsection Opening multiple plots in contemporaneous windows
While not being a provided by @i{wxMaxima} this feature of @i{Maxima} (on
setups that support it) sometimes comes in handily. The following
example comes from a post from Mario Rodriguez to the @i{Maxima} mailing
list: 
@example
load(draw);

/* Parabola in window #1 */
draw2d(terminal=[wxt,1],explicit(x^2,x,-1,1));

/* Parabola in window #2 */
draw2d(terminal=[wxt,2],explicit(x^2,x,-1,1));

/* Paraboloid in window #3 */
draw3d(terminal=[wxt,3],explicit(x^2+y^2,x,-1,1,y,-1,1));
@end example
@section Embedding graphics
if the @file{.wxmx} file format is being used embedding files in a
wxMaxima project can be done as easily as per drag-and-drop. But
sometimes (for example if an image's contents might change later on in
a session)
it is better to tell the file to load the image on evaluation:
@example
show_image("Mann.png");
@end example
@section wxmaximarc
@cindex Startup File
If the @i{Maxima} user directory there is a text file named @file{wxmaxima-init.mac}
the contents of the file is passed to @i{Maxima} automatically every time
a new worksheet has been started.

To find out which directory @i{Maxima} uses as the user directory just
type in the following line:
@example
maxima_userdir;
@end example
The answer from @i{Maxima} will specify the name of the directory that the
startup file can be placed in. 
@example
%o1 /home/username/.maxima
@end example
@section Special variables
@itemize @bullet
@item @var{wxsubscripts} tells @i{Maxima} if it should convert variable
      names that contain an underscore (@code{R_150}) or the like into
      subscripted variables. See @code{wxdeclare_subscript} for details
      which variable names are automatically converted.
@item @var{wxfilename} This variable contains the name of the file
currently opened in @i{wxMaxima}. On windows this piece of information
is only available if in the configuration dialogue the checkbox @code{Maxima/maxima's pwd is path to document} is checked.
@item @var{wxplot_pngcairo} tells if @i{wxMaxima} tries to use gnuplot's
pngcairo terminal that provides more line styles and a better overall
graphics quality. This variable can be used for reading or overriding
the respective setting in the configuration dialog.
@item @var{wxplot_size} defines the size of embedded plots.
@item @var{wxchangedir} On most operating systems @i{wxMaxima}
      automatically sets @i{Maxima}'s working directory to the directory
      of the current file. This will allow file I/O (e.g. by
      @code{read_matrix}) to work without specifying the whole path to the 
      file that has to be read or written. On Windows this is
      deactivated, though: The Lisp Standard doesn't contain a concept of
      the current working directory. Therefore there is no standard
      way of setting it and changing to a directory that isn't on
      the drive @i{Maxima} has been installed to might cause @i{Maxima} to
      try to read is own package files from this drive, too, instead
      of from the drive @i{Maxima} has been installed to. Setting
      @var{wxchangedir} to @code{true} tells wxMmaxima that it has to
      risk that and to set @i{Maxima}'s working directory.
@item @var{wxanimate_framerate} The number of frames per second the
      following animations have to be played back with. -1 tells
      @i{wxMaxima} to use the default frame rate from the config dialog.
@end itemize
@section Pretty-printing 2D output
The function @code{(table_form)} displays a 2D list in a form that is
more readable than the output @i{Maxima}'s default output routine.
@example
table_form(
    [
        [1,2],
        [3,4]
    ]
)$
@end example
@section Bug reporting
wxMaxima provides a few functions that gather bug reporting
information about the current system:
@itemize @bullet
@item @code{wxbuild_info()} gathers information about the currently
running version of @i{wxMaxima}
@item @code{wxbug_report()} tells how and where to file bugs
@end itemize
@node Troubleshooting
@chapter Troubleshooting
@section Cannot connect to @i{Maxima}
Since @i{Maxima} (the program that does the actual mathematics) and
wxMaxima (providing the easy-to-use user interface) are separate
programs that communicate by the means of a local network connection.
Therefore the most probable cause is that this connection is somehow not
working. For example a firewall could be set up in a way that it
doesn't just prevent against unauthorized connections from the
internet (and perhaps to intercept some connections to the internet,
too), but it also to blocks inter-process-communication inside the same
computer. Note that since @i{Maxima} is being run by a lisp processor
the process communication that is blocked from does not necessarily
have to be named "maxima". Common names of the program that opens
the network connection would be @file{sbcl}, @file{gcl}, @file{ccl}, @file{lisp.exe} or similar names.

On Un*x computers another possible reason
would be that the loopback network that provides network connections
between two programs in the same computer isn't properly configured.
@section How to save data from a broken .wxmx file
Internally most modern xml-based formats are ordinary zip-files with
one special characteristic: the first file in the archive is stored uncompressed
and provides information about what type of program can open this
file.

If the zip signature at the end of the file is still intact
after renaming a broken @file{.wxmx} file to @file{.zip} most operating
systems will provide a way to extract any portion of information that
is stored inside it. The can be done when there is the need of
recovering the original image files from a text processor document.
If the zip signature isn't intact that does not need to be the end
of the world: If @i{wxMaxima} during saving detected that something went
wrong there will be a @file{wxmx~} file whose contents might help and
even if there isn't such a file: If the configuration option is set
that @file{.wxmx} files have to be optimized for version control
it is possible to rename the @file{.wxmx} file to a @file{.txt} file
and to use a text editor to recover the file's contents.
@section @i{wxMaxima} waits forever for data from @i{Maxima}
In old versions of @i{Maxima} this might be caused by the fact that a closing
brace, bracket, parenthesis or hyphenation mark is missing: In this case
Maxima waits until it gets the rest of its input (which it never
does).

In order to find out if this is the issue the operating system
normally provides a way to determine if @i{Maxima} is actually 
really working forever trying to solve the current problem.
@section I want some debug info to be displayed on the screen before my command has finished
Normally @i{wxMaxima} waits for the whole 2D formula to be transferred before
it begins to typeset. This saves time for making many attempts to typeset a
only partially completed equation. There is a @code{disp} command, though, that
will provide debug output immediately and without waiting for the current
Maxima command to finish, though:
@example
for i:1 thru 10 do (
   disp(i),
   t:makelist(i,i,1000000),
   length(t)
)$
@end example
@section @i{wxMaxima} on Windows crashes on displaying seemingly simple equations
The jsMath fonts allow for excellent 2D-display of equations. But there
are of broken versions of this package that crash @i{wxMaxima}.
A working version can be downloaded from @uref{http://www.math.union.edu/~dpvc/jsmath/download/jsMath-fonts.html math.union.edu}. To make @i{wxMaxima} actually use these fonts
the according checkbox has to be enabled in the Styles tab of @i{wxMaxima}'s
configuration dialogue.
@section Plotting only shows an closed empty envelope with an error message
This means that @i{wxMaxima} was unable to read the file @i{Maxima} was supposed
to instruct gnuplot to create.

Possible reasons that might cause this are:
@itemize @bullet
@item The plotting command is part of a third-party package like
      @code{implicit_plot} but this package wasn't loaded by @i{Maxima}'s
      @code{load()} command before trying to plot.
@item @i{Maxima} tried to do something the currently installed version of
      gnuplot isn't able to understand. In this case the file
      @file{maxout.gnuplot} in the directory @i{Maxima}'s variable
      @var{maxima_userdir} points to contains the instructions from
      @i{Maxima} to gnuplot. Most of the time this file's contents therefore is
      helpful when debugging the problem.
@item Gnuplot was instructed to use the pngcairo library that provides
      antialiassing and additional line styles, but it wasn't compiled to
      support this possibility. Solution: Uncheck the "Use the cairo
      terminal for plot" checkbox in the configuration dialog and
      don't set @var{wxplot_pngcairo} to true from @i{Maxima}.
@item Gnuplot didn't output a valid @file{.png} file.
@end itemize
@section Plotting an animation results in ``error: undefined variable''
The value of the slider variable by default is only substituted into the
expression that is to be plotted if it is visible there. Putting an
@code{ev()} around this expression should resolve this problem.
@section I lost a cell contents and undo doesn't remember
There are separate undo functions for cell operations and for changes
inside of cells so chances are low that this ever happens. If it does
there are several methods to recover data:
@itemize @bullet
@item @i{wxMaxima} actually has two undo features: The global undo buffer
that is active if no cell is selected and a per-cell undo buffer that is
active if the cursor is inside a cell. It is worth trying to use both undo
options in order to see if an old value can still be accessed.
@item If you still have a way to find out what label @i{Maxima} has assigned
to the cell just type in the cell's label and it's contents will
reappear.
@item If you don't: Don't panic. In the ``Maxima'' menu there
is a way to show a history pane that shows all @i{Maxima} commands that
have been issued recently.
@item If nothing else helps @i{Maxima} contains a replay feature:
@example
%i1 playback();
@end example
@end itemize
@section @i{wxMaxima} starts up with the message ``Maxima process terminated.''
One possible reason is that @i{Maxima} cannot be found in the location that is
set in the ``Maxima'' tab of @i{wxMaxima}'s configuration dialog and therefore
won't run at all. Setting the path to a working @i{Maxima} binary should
fix this problem.
@section @i{Maxima} is forever calculating and not responding to input
It is theoretically possible that @i{wxMaxima} doesn't realize that @i{Maxima} has
finished calculating and therefore never gets informed it can send new data
to @i{Maxima}. If this is the case ``Trigger evaluation'' might resynchronize
the two programs.
@section File I/O from @i{Maxima} doesn't work on Windows
On windows File I/O isn't relative to the directory of the current
file by default. If you store the @i{Maxima} file on the drive @i{wxMaxima} is
installed to setting @var{wxchangedir} to @code{true} will fix
that for @code{load}, @code{read_list}, @code{batch},
@code{read_matrix}, @code{save} and all similar commands.

Setting this variable to @code{true} might have a drawback, though:
Maxima knows which directory it is installed in and will search for
any additional package that is requested by a @code{load} command in
this directory, too. But it might not know which drive it is installed
on. If @var{wxchangedir} is @code{true} and the current file is saved
on a different drive than the one @i{Maxima} is installed on @i{Maxima}
therefore might fail to load the additional packages it was bundled
with.
@section My SBCL-based @i{Maxima} runs out of memory
SBCL by default comes with a memory limit that allows it to run even on
low-end computers. When compiling a big software package like lapack
or dealing with extremely big lists or equations this limit might be
too low. In order to extend the limits SBCL can be provided with the
command line parameter
@code{--dynamic-space-size} that tells SBCL how many megabytes it
should reserve. A 32bit-Windows-SBCL can reserve up to 999 Megabytes.
A 64-bit SBCL version running on Windows can be instructed to use
more than the about 1280 Megabytes compiling lapack needs.

One way to provide @i{Maxima} (and thus SBCL) with command line parameters is
the @code{additional parameters} field of @i{wxMaxima}'s configuration
dialogue.
@ifnotinfo

@image{sbclMemory,12cm}

@end ifnotinfo
@section Input sometimes is sluggish/ignoring keys on Ubuntu
Installing the package @code{ibus-gtk} should resolve this issue. See
(@uref{https://bugs.launchpad.net/ubuntu/+source/wxwidgets3.0/+bug/1421558}) for details.
@section @i{wxMaxima} halts when @i{Maxima} processes Greek characters or Umlauts
If your @i{Maxima} is based on SBCL the following lines have to be added to your
@file{.sblrc}:
@example
(setf sb-impl::*default-external-format* :utf-8)
@end example
The folder this file has to be placed in is system- and installation-specific.
But any SBCL-based @i{Maxima} that already has evaluated
a cell in the current session will happily tell where it can be found after
getting the following command:
@example
:lisp (sb-impl::userinit-pathname)
@end example

@section Plotting
@subsection Can I make @i{wxMaxima} output both image files and embedded plots at once?
It is easier to make it first generate the images and then import them again
as the following two functions will do:
@example
load("draw");
pngdraw(name,[contents]):=
(    
    draw(
        append(   
            [
                terminal=pngcairo,
                dimensions=wxplot_size,
                file_name=name
            ],
            contents
        )
    ),
    show_image(printf(false,"~a.png",name))
);
pngdraw2d(name,[contents]):=
    pngdraw(name,gr2d(contents));
    
pngdraw2d("Test",
        explicit(sin(x),x,1,10)
);
@end example
@subsection Can I set the aspect ratio of a plot?
Not directly using @i{Maxima}. But there are gnuplot commands for it:
@example
     wxdraw2d(
         user_preamble="set size ratio 1;set tmargin 3;set bmargin 3;set lmargin 3;set rmargin 3",
         explicit(sin(x),x,1,10)
     ),wxplot_size=[1000,1000];
@end example
@node FAQ
@chapter FAQ
@section Is there a way to make more text fit on a pdfLaTeX page?
There is: Just add the following lines to the LaTeX preamble (for
example by using the respective field in the config dialog):
@example
\usepackage[a4paper,landscape,left=1cm,right=1cm,top=1cm,bottom=1cm]@{geometry@}
@end example
@node CommandLine
@chapter Command-line arguments
Most operating systems provide less complicated ways of
starting programs than the command line so this possibility
is only rarely used. @i{wxMaxima} still provides some
command line switches, though.
@itemize @bullet
@item @code{-v} or @code{--version}: Output the version information
@item @code{-h} or @code{--help}: Output a short help text
@item @code{-o} or @code{--open}: Open the filename given as argument to this
      command-line switch
@item @code{-b} or @code{--batch}: If the command-line opens a file all cells in this file are
      evaluated and the file is saved afterwards. This is for example useful if
      the sesson described in the file makes @i{Maxima} generate output files.
      Batch-processing will be stopped if @i{wxMaxima} detects that @i{Maxima} has output
      an error and will pause if @i{Maxima} has a question: Mathematics is somewhat
      interactive by nature so a completely interaction-free batch processing
      cannot always be guaranteed.
@item (Only on windows): @code{-f} or @code{--ini}: Use the init file that was
      given as argument to this command-line switch
@end itemize
Instead of a minus some operating systems might use a dash in
front of the command-line switches.
@shortcontents
@contents
@bye
